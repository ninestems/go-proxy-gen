// Code generated by generator DO NOT EDIT.

package proxy

import (
	source "go-proxy-gen/innert/packtest"
	trace "go.opentelemetry.io/otel/trace"
	traceprovider "go.opentelemetry.io/otel/sdk/trace"
    "fmt"
    "reflect"
    "go.opentelemetry.io/otel/attribute"
    "go.opentelemetry.io/otel/codes"
	"context"
	"go-proxy-gen/entity"
)

// attr helps define correct type for trace proxy layer.
func attr(key string, value any) attribute.KeyValue {
    switch v := value.(type) {
    case string:
        return attribute.String(key, v)
    case bool:
        return attribute.Bool(key, v)
    case int:
        return attribute.Int(key, v)
    case int64:
        return attribute.Int64(key, v)
    case float64:
        return attribute.Float64(key, v)
    case []string:
        return attribute.StringSlice(key, v)
    case fmt.Stringer:
        return attribute.String(key, v.String())
    default:
        return attribute.String(key, fmt.Sprintf("%v (%s)", value, reflect.TypeOf(value)))
    }
}

// ExampleGenerateProxyTracer proxy wrapper for source.ExampleGenerate.
type ExampleGenerateProxyTracer struct {
	src source.ExampleGenerate
	trace trace.Tracer
}

// NewExampleGenerateProxyTracer creates a new proxy trace for source.ExampleGenerate.
func NewExampleGenerateProxyTracer(
	src source.ExampleGenerate,
	tp *traceprovider.TracerProvider,
) *ExampleGenerateProxyTracer {
	return &ExampleGenerateProxyTracer{
		src: src,
		trace: tp.Tracer("ExampleGenerateProxyTracer"),
	}
}

// All is proxy method for source.ExampleGenerate.All.
func (p *ExampleGenerateProxyTracer) All(ctx context.Context, in *entity.IO) (out0 *entity.IO, out1 error) {
	ctx, span := p.trace.Start(ctx, "ExampleGenerateProxyTracer.All() started")
	defer span.End()
    span.SetAttributes(
        attr("trace_traceID", ctx.Value("trace_id")),
        attr("trace_some_input", in.Key()),
    )
	out0, out1 = p.src.All(ctx, in)
	if out1 != nil {
        span.RecordError(out1)
        span.SetStatus(codes.Error, out1.Error())
	} else {
        span.SetAttributes(
            attr("trace_some_output", out0.Key()),
        )
        span.SetStatus(codes.Ok, "ExampleGenerateProxyTracer.All() success")
	}

	return
}

// NoNames is proxy method for source.ExampleGenerate.NoNames.
func (p *ExampleGenerateProxyTracer) NoNames(in0 context.Context, in1 *entity.IO) (out0 *entity.IO, out1 error) {
	in0, span := p.trace.Start(in0, "ExampleGenerateProxyTracer.NoNames() started")
	defer span.End()
    span.SetAttributes(
        attr("trace_traceID", in0.Value("trace_id")),
        attr("trace_some_input", in1.Key()),
    )
	out0, out1 = p.src.NoNames(in0, in1)
	if out1 != nil {
        span.RecordError(out1)
        span.SetStatus(codes.Error, out1.Error())
	} else {
        span.SetAttributes(
            attr("trace_some_output", out0.Key()),
        )
        span.SetStatus(codes.Ok, "ExampleGenerateProxyTracer.NoNames() success")
	}

	return
}

// NoOut is proxy method for source.ExampleGenerate.NoOut.
func (p *ExampleGenerateProxyTracer) NoOut(in0 context.Context, in1 *entity.IO) {
	in0, span := p.trace.Start(in0, "ExampleGenerateProxyTracer.NoOut() started")
	defer span.End()
    span.SetAttributes(
        attr("trace_traceID", in0.Value("trace_id")),
        attr("trace_some_input", in1.Key()),
    )
	p.src.NoOut(in0, in1)
	span.SetStatus(codes.Ok, "ExampleGenerateProxyTracer.NoOut() success")

	return
}

// NoErrorOut is proxy method for source.ExampleGenerate.NoErrorOut.
func (p *ExampleGenerateProxyTracer) NoErrorOut(in0 context.Context, in1 *entity.IO) (out0 *entity.IO) {
	in0, span := p.trace.Start(in0, "ExampleGenerateProxyTracer.NoErrorOut() started")
	defer span.End()
    span.SetAttributes(
        attr("trace_traceID", in0.Value("trace_id")),
        attr("trace_some_input", in1.Key()),
    )
	out0 = p.src.NoErrorOut(in0, in1)
    span.SetAttributes(
        attr("trace_some_output", out0.Key()),
    )
    span.SetStatus(codes.Ok, "ExampleGenerateProxyTracer.NoErrorOut() success")

	return
}

// OnlyContext is proxy method for source.ExampleGenerate.OnlyContext.
func (p *ExampleGenerateProxyTracer) OnlyContext(in0 context.Context) {
	in0, span := p.trace.Start(in0, "ExampleGenerateProxyTracer.OnlyContext() started")
	defer span.End()
    span.SetAttributes(
        attr("trace_traceID", in0.Value("trace_id")),
    )
	p.src.OnlyContext(in0)
	span.SetStatus(codes.Ok, "ExampleGenerateProxyTracer.OnlyContext() success")

	return
}