// Code generated by generator DO NOT EDIT.

package proxy

import (
	source "go-proxy-gen/innert/packtest"
	zap "go.uber.org/zap"
    "encoding/json"
    "fmt"
    "reflect"
	"context"
	"go-proxy-gen/entity"
)

func zfield(key string, value any) zap.Field {
    switch v := value.(type) {
    case string:
        return zap.String(key, v)
    case bool:
        return zap.Bool(key, v)
    case int:
        return zap.Int(key, v)
    case int64:
        return zap.Int64(key, v)
    case int32:
        return zap.Int32(key, v)
    case uint:
        return zap.Uint(key, v)
    case uint64:
        return zap.Uint64(key, v)
    case float64:
        return zap.Float64(key, v)
    case float32:
        return zap.Float32(key, v)
    case []string:
        return zap.Strings(key, v)
    case fmt.Stringer:
        return zap.String(key, v.String())
    case error:
        return zap.Error(v)
    case json.RawMessage:
        return zap.ByteString(key, v)
    default:
        if b, err := json.Marshal(value); err == nil {
            return zap.ByteString(key, b)
        }
        return zap.String(key, fmt.Sprintf("%v (%s)", value, reflect.TypeOf(value)))
    }
}

// ExampleGenerateProxyLogger proxy wrapper for source.ExampleGenerate.
type ExampleGenerateProxyLogger struct {
	src source.ExampleGenerate
	log *zap.Logger
}

// NewExampleGenerateProxyLogger creates a new proxy logger for source.ExampleGenerate.
func NewExampleGenerateProxyLogger(
	src source.ExampleGenerate,
	log *zap.Logger,
) *ExampleGenerateProxyLogger {
	return &ExampleGenerateProxyLogger{
		src: src,
		log: log.Named("ExampleGenerateProxyLogger"),
	}
}

// All is proxy method for source.ExampleGenerate.All.
func (p *ExampleGenerateProxyLogger) All(ctx context.Context, in *entity.IO) (out0 *entity.IO, out1 error) {
	p.log.Info(
		"All() started",
		zap.Any("log_traceID", ctx.Value("trace_id")),
		zfield("log_some_input", in.Key()),
	)
	out0, out1 = p.src.All(ctx, in)
	if out1 != nil {
		p.log.Info(
			"All() ends with error",
			zap.Error(out1),
		)
	} else {
		p.log.Info(
			"All() ends with success",
			zfield("log_some_output", out0.Key()),
		)
	}

	return
}

// NoNames is proxy method for source.ExampleGenerate.NoNames.
func (p *ExampleGenerateProxyLogger) NoNames(in0 context.Context, in1 *entity.IO) (out0 *entity.IO, out1 error) {
	p.log.Info(
		"NoNames() started",
		zap.Any("log_traceID", in0.Value("trace_id")),
		zfield("log_some_input", in1.Key()),
	)
	out0, out1 = p.src.NoNames(in0, in1)
	if out1 != nil {
		p.log.Info(
			"NoNames() ends with error",
			zap.Error(out1),
		)
	} else {
		p.log.Info(
			"NoNames() ends with success",
			zfield("log_some_output", out0.Key()),
		)
	}

	return
}

// NoOut is proxy method for source.ExampleGenerate.NoOut.
func (p *ExampleGenerateProxyLogger) NoOut(in0 context.Context, in1 *entity.IO) {
	p.log.Info(
		"NoOut() started",
		zap.Any("log_traceID", in0.Value("trace_id")),
		zfield("log_some_input", in1.Key()),
	)
	p.src.NoOut(in0, in1)
	p.log.Info("NoOut() ends with success")

	return
}

// NoErrorOut is proxy method for source.ExampleGenerate.NoErrorOut.
func (p *ExampleGenerateProxyLogger) NoErrorOut(in0 context.Context, in1 *entity.IO) (out0 *entity.IO) {
	p.log.Info(
		"NoErrorOut() started",
		zap.Any("log_traceID", in0.Value("trace_id")),
		zfield("log_some_input", in1.Key()),
	)
	out0 = p.src.NoErrorOut(in0, in1)
    p.log.Info(
        "NoErrorOut() ends with success",
        zfield("log_some_output", out0.Key()),
    )

	return
}

// OnlyContext is proxy method for source.ExampleGenerate.OnlyContext.
func (p *ExampleGenerateProxyLogger) OnlyContext(in0 context.Context) {
	p.log.Info(
		"OnlyContext() started",
		zap.Any("log_traceID", in0.Value("trace_id")),
	)
	p.src.OnlyContext(in0)
	p.log.Info("OnlyContext() ends with success")

	return
}