// Code generated by generator DO NOT EDIT.

package proxy

import (
	source "{{ .Relative }}/{{ .Name }}"
	trace "go.opentelemetry.io/otel/trace"
	traceprovider "go.opentelemetry.io/otel/sdk/trace"
    "fmt"
    "reflect"
    "go.opentelemetry.io/otel/attribute"
    "go.opentelemetry.io/otel/codes"
{{- range .Imports }}
{{- if eq .Alias "" }}
	{{ .Source }}
{{- else }}
	{{ .Alias }} {{ .Source }}
{{- end }}
{{- end }}
)

// attr helps define correct type for trace proxy layer.
func attr(key string, value any) attribute.KeyValue {
    switch v := value.(type) {
    case string:
        return attribute.String(key, v)
    case bool:
        return attribute.Bool(key, v)
    case int:
        return attribute.Int(key, v)
    case int64:
        return attribute.Int64(key, v)
    case float64:
        return attribute.Float64(key, v)
    case []string:
        return attribute.StringSlice(key, v)
    case fmt.Stringer:
        return attribute.String(key, v.String())
    default:
        return attribute.String(key, fmt.Sprintf("%v (%s)", value, reflect.TypeOf(value)))
    }
}

{{- range .Interfaces }}
{{- $ifacename := .Name }}

// {{ $ifacename }}ProxyTracer proxy wrapper for source.{{ $ifacename }}.
type {{ $ifacename }}ProxyTracer struct {
	src source.{{ .Name }}
	trace trace.Tracer
}

// New{{ .Name }}ProxyTracer creates a new proxy trace for source.{{ $ifacename }}.
func New{{ $ifacename }}ProxyTracer(
	src source.{{ $ifacename }},
	tp *traceprovider.TracerProvider,
) *{{ $ifacename }}ProxyTracer {
	return &{{ $ifacename }}ProxyTracer{
		src: src,
		trace: tp.Tracer("{{ .Name }}ProxyTracer"),
	}
}

{{- range .Functions }}

{{- /* printing function body start */}}

// {{ .Name }} is proxy method for source.{{ $ifacename }}.{{ .Name }}.
func (p *{{ $ifacename }}ProxyTracer) {{ .Name }}(
{{- /* printing function input param in one line start */}}
{{- range $i, $p := .Input }}
	{{- if $i }}, {{ end }}{{ $p.Name}} {{ $p.Source }}
{{- end }})
{{- /* printing function input param in one line end */}}
{{- if eq (len .Output) 1 }} ({{ (index .Output 0).Name }} {{ (index .Output 0).Source }})
{{- else if gt (len .Output) 1 }} (
{{- /* printing function output param in one line start */}}
{{- range $i, $p := .Output }}
	{{- if $i }}, {{ end }}{{ $p.Name}} {{ $p.Source }}
{{- end }})
{{- /* printing function output param in one line end */}}
{{- else }}
{{- /* needed if output params is empty */}}
{{- end }} {
	{{ (index .Input 0).Name }}, span := p.trace.Start({{ (index .Input 0).Name }}, "{{ $ifacename }}ProxyTracer.{{ .Name }}() started")
	defer span.End()
    {{- if or (len .TraceContextTags) (len .TraceInputTags) }}
    span.SetAttributes(
    {{- range $i, $tag := .TraceContextTags }}
        attr("{{ $tag.Alias}}", {{ $tag.Name }}.Value("{{ $tag.Key }}")),
        {{- end }}
        {{- range $i, $tag := .TraceInputTags }}
        attr("{{ $tag.Alias}}", {{ $tag.Call }}),
    {{- end }}
    )
    {{- end }}

	{{- /* calling functions in proxy start */}}
	{{ if ge (len .Output) 1 }}
        {{- range $i, $p := .Output }}
            {{- if $i }}, {{ end }}{{ $p.Name }}
        {{- end }} = p.src.{{ .Name }}(
	{{- /* list of return more then zero and have no error */}}
    {{- /* list of return equal zero */}}
	{{- else }}p.src.{{ .Name }}(
    {{- end }}
	{{- /* calling functions in proxy end */}}

	{{- /* start make input params */}}
    {{- range $i, $p := .Input }}
        {{- if $i }}, {{ end }}{{ $p.Name }}
    {{- end }})
	{{- /* end make input params */}}

	{{- /* processed result of calling functions in proxy start */}}
	{{- if and (ge (len .Output) 1) (eq (index .Output (sub (len .Output) 1)).Source "error") }}
	if {{ (index .Output (sub (len .Output) 1)).Name }} != nil {
        span.RecordError({{ (index .Output (sub (len .Output) 1)).Name }})
        span.SetStatus(codes.Error, {{ (index .Output (sub (len .Output) 1)).Name }}.Error())
	} else {
    {{- if (len .TraceOutputTags) }}
        span.SetAttributes(
        {{- range $i, $tag := .TraceOutputTags }}
            attr("{{ $tag.Alias}}", {{ $tag.Call }}),
        {{- end }}
        )
    {{- end }}
        span.SetStatus(codes.Ok, "{{ $ifacename }}ProxyTracer.{{ .Name }}() success")
	}
	{{- else if (ge (len .Output) 1)}}
    {{- if (len .TraceOutputTags) }}
    span.SetAttributes(
    {{- range $i, $tag := .TraceOutputTags }}
        attr("{{ $tag.Alias}}", {{ $tag.Call }}),
    {{- end }}
    )
    {{- end }}
    span.SetStatus(codes.Ok, "{{ $ifacename }}ProxyTracer.{{ .Name }}() success")
	{{- else }}
	span.SetStatus(codes.Ok, "{{ $ifacename }}ProxyTracer.{{ .Name }}() success")
	{{- end }}
	{{- /* processed result of calling functions in proxy end */}}

	return
}
{{- /* printing function body end */}}

{{- end }} {{- /* end cycle by functions */}}

{{- end }} {{- /* end cycle by interfaces */}}