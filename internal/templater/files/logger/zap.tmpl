// Code generated by generator DO NOT EDIT.

package proxy

import (
	source "{{ .Relative }}/{{ .Name }}"
	zap "go.uber.org/zap"
    "encoding/json"
    "fmt"
    "reflect"
{{- range .Imports }}
{{- if eq .Alias "" }}
	{{ .Source }}
{{- else }}
	{{ .Alias }} {{ .Source }}
{{- end }}
{{- end }}
)

func zfield(key string, value any) zap.Field {
    switch v := value.(type) {
    case string:
        return zap.String(key, v)
    case bool:
        return zap.Bool(key, v)
    case int:
        return zap.Int(key, v)
    case int64:
        return zap.Int64(key, v)
    case int32:
        return zap.Int32(key, v)
    case uint:
        return zap.Uint(key, v)
    case uint64:
        return zap.Uint64(key, v)
    case float64:
        return zap.Float64(key, v)
    case float32:
        return zap.Float32(key, v)
    case []string:
        return zap.Strings(key, v)
    case fmt.Stringer:
        return zap.String(key, v.String())
    case error:
        return zap.Error(v)
    case json.RawMessage:
        return zap.ByteString(key, v)
    default:
        if b, err := json.Marshal(value); err == nil {
            return zap.ByteString(key, b)
        }
        return zap.String(key, fmt.Sprintf("%v (%s)", value, reflect.TypeOf(value)))
    }
}

{{- range .Interfaces }}
{{- $ifacename := .Name }}

// {{ $ifacename }}ProxyLogger proxy wrapper for source.{{ $ifacename }}.
type {{ $ifacename }}ProxyLogger struct {
	src source.{{ .Name }}
	log *zap.Logger
}

// New{{ .Name }}ProxyLogger creates a new proxy logger for source.{{ $ifacename }}.
func New{{ $ifacename }}ProxyLogger(
	src source.{{ $ifacename }},
	log *zap.Logger,
) *{{ $ifacename }}ProxyLogger {
	return &{{ $ifacename }}ProxyLogger{
		src: src,
		log: log.Named("{{ $ifacename }}ProxyLogger"),
	}
}

{{- range .Functions }}

{{- /* printing function body start */}}

// {{ .Name }} is proxy method for source.{{ $ifacename }}.{{ .Name }}.
func (p *{{ $ifacename }}ProxyLogger) {{ .Name }}(
{{- /* printing function input param in one line start */}}
{{- range $i, $p := .Input }}
	{{- if $i }}, {{ end }}{{ $p.Name}} {{ $p.Source }}
{{- end }})
{{- /* printing function input param in one line end */}}
{{- if eq (len .Output) 1 }} ({{ (index .Output 0).Name }} {{ (index .Output 0).Source }})
{{- else if gt (len .Output) 1 }} (
{{- /* printing function output param in one line start */}}
{{- range $i, $p := .Output }}
	{{- if $i }}, {{ end }}{{ $p.Name}} {{ $p.Source }}
{{- end }})
{{- /* printing function output param in one line end */}}
{{- else }}
{{- /* needed if output params is empty */}}
{{- end }} {
	p.log.Info(
		"{{ .Name }}() started",
	{{- range $i, $tag := .LogContextTags }}
		zap.Any("{{ $tag.Alias}}", {{ $tag.Name }}.Value("{{ $tag.Key }}")),
	{{- end }}
	{{- range $i, $tag := .LogInputTags }}
		zfield("{{ $tag.Alias}}", {{ $tag.Name }}.{{ $tag.Key }}),
	{{- end }}
	)

	{{- /* calling functions in proxy start */}}
	{{ if ge (len .Output) 1 }}
        {{- range $i, $p := .Output }}
            {{- if $i }}, {{ end }}{{ $p.Name }}
        {{- end }} = p.src.{{ .Name }}(
	{{- /* list of return more then zero and have no error */}}
    {{- /* list of return equal zero */}}
	{{- else }}p.src.{{ .Name }}(
    {{- end }}
	{{- /* calling functions in proxy end */}}

	{{- /* start make input params */}}
    {{- range $i, $p := .Input }}
        {{- if $i }}, {{ end }}{{ $p.Name }}
    {{- end }})
	{{- /* end make input params */}}

	{{- /* processed result of calling functions in proxy start */}}
	{{- if and (ge (len .Output) 1) (eq (index .Output (sub (len .Output) 1)).Source "error") }}
	if {{ (index .Output (sub (len .Output) 1)).Name }} != nil {
		p.log.Info(
			"{{ .Name }}() ends with error",
			zap.Error({{ (index .Output (sub (len .Output) 1)).Name }}),
		)
	} else {
		p.log.Info(
			"{{ .Name }}() ends with success",
		{{- range $i, $tag := .LogOutputTags }}
			zfield("{{ $tag.Alias}}", {{ $tag.Name }}.{{ $tag.Key }}),
		{{- end }}
		)
	}
	{{- else if (ge (len .Output) 1)}}
    p.log.Info(
        "{{ .Name }}() ends with success",
    {{- range $i, $tag := .LogOutputTags }}
        zfield("{{ $tag.Alias}}", {{ $tag.Name }}.{{ $tag.Key }}),
    {{- end }}
    )
	{{- else }}
	p.log.Info("{{ .Name }}() ends with success")
	{{- end }}
	{{- /* processed result of calling functions in proxy end */}}

	return
}
{{- /* printing function body end */}}

{{- end }} {{- /* end cycle by functions */}}

{{- end }} {{- /* end cycle by interfaces */}}