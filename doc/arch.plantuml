@startuml

package config {
    class Config {
        - debug: bool
        - logger: Template
        - tracer: Template
        - retrier: Template
        - path: Path
        - ifaces: string[]
    }

    class Template {
        custom: string
        package: string
        function: string
    }

    class Path {
        - from: string
        - to: string
    }

    Config -down--> Path
    Config -down--> Template
}

package builder {
    class "build()" as buildFn << (F, #FFDD99) >>
}

builder -up> config.Config

package internal {

    interface ParserI <<interface>> {
        Read(in string, names ...string): Interface[]
    }

    interface DefinerI <<interface>> {
        Define(out string, in Interface[]): error
    }

    interface ScannerI <<interface>> {
        Scan(in string, names ...string): Interface[]
    }

    interface ValidatorI <<interface>> {
        Validate(in Interface[]): error
    }

    interface ProxierI <<interface>> {
        Define(in Interface): byte[]
    }

    interface EmitterI <<interface>> {
        Write(file byte[]): error
    }

    package scanner {
        class Scanner {
            + Scan(in string, names ...string): Interface[]
        }
        note top of Scanner: Scans for tags\nin interfaces/methods

        Scanner .down.|> ScannerI
    }

    package validator {
        class Validator {
            + Validate(in Interface[]): error
        }
        note top of Validator: Validates structure\nand tag correctness

        Validator .down.|> ValidatorI
    }

    package parser {
        class Parser {
            + Read(in string, names ...string): Interface[]
        }
        note top of Parser: Reads packages\nand extracts interfaces

        Parser .down.|> ParserI
        Parser -up-> ScannerI
        Parser -up-> ValidatorI
    }

    package emitter {
        class Emitter {
            + Write(file byte[]): error
        }
        note top of Emitter: Writes generated\nGo files to disk

        Emitter .down.|> EmitterI
    }

    package proxier {
        class Proxier {
            + Define(in Interface): byte[]
        }
        note top of Proxier: Builds code\nfor logging/tracing wrappers

        Proxier .down.|> ProxierI
    }

    package definer {
        class Definer {
            + Define(out string, in Interface[]): error
        }
        note top of Definer: Generates\nwrappers and proxy methods

        Definer .down.|> DefinerI
        Definer -up-> ProxierI
        Definer -up-> EmitterI
    }

    package generator {
        class Generator
    }

    note top of Generator: Coordinates\nthe whole generation process

    Generator -up-> ParserI
    Generator -up-> DefinerI

    package template {
        class Logger {
            + GetPackage(): string
            + GetFunction(): string
        }

        class Tracer {
            + GetPackage(): string
            + GetFunction(): string
        }

        class Retrier {
            + GetPackage(): string
            + GetFunction(): string
        }

        note right of Logger
            Loads template from file\n(if provided in config)
            or uses default embedded template
        end note

        note right of Tracer
            Loads template from file\n(if provided in config)
            or uses default embedded template
        end note

        note right of Retrier
            Loads template from file\n(if provided in config)
            or uses default embedded template
        end note
    }
}

package cmd {
    package generator {
    }

}
    cmd.generator -up--> internal.generator.Generator
    cmd.generator --up----> builder.buildFn


@enduml
