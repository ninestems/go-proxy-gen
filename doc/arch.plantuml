@startuml

package config {
    class Config {
        - debug: bool
        - logger: Template
        - tracer: Template
        - retrier: Template
        - path: Path
        - ifaces: string[]
    }

    class Template {
        custom: string
        package: string
        function: string
    }

    class Path {
        - from: string
        - to: string
    }

    Config -down--> Path
    Config -down--> Template
}

package builder {
    class "build()" as buildFn << (F, #FFDD99) >>
}

builder -up> config.Config

package internal {

    interface ParserI <<interface>> {
        Read(): Package
    }

    interface DefinerI <<interface>> {
        Define(in Package): error
    }

    interface ScannerI <<interface>> {
        Scan(in string, names ...string): Interface[]
    }

    interface ValidatorI <<interface>> {
        Validate(in Package): error
    }

    interface ProxierI <<interface>> {
        Define(in Package): byte[]
    }

    interface EmitterI <<interface>> {
        Write(name string, file byte[]): error
    }

    interface TemplaterI <<interface>> {
        Template(): string
    }

    package scanner {
        class Scanner {
            + Scan(in string, names ...string): Package
        }
        note top of Scanner: Scans for tags\nin interfaces/methods

        Scanner .down.|> ScannerI
    }

    package validator {
        class Validator {
            + Validate(in Package): error
        }
        note top of Validator: Validates structure\nand tag correctness

        Validator .down.|> ValidatorI
    }

    package parser {
        class Parser {
            + Read(): Package
        }
        note top of Parser: Reads packages\nand extracts interfaces

        Parser .down.|> ParserI
        Parser -up-> ScannerI
        Parser -up-> ValidatorI
    }

    package emitter {
        class Emitter {
            + Write(name string,file byte[]): error
        }
        note top of Emitter: Writes generated\nGo files to disk

        Emitter .down.|> EmitterI
    }

    package proxier {
        class Proxier {
            - tl: TemplaterI
            - tt: TemplaterI
            - tr: TemplaterI
            + Define(in Package): byte[]
        }
        note top of Proxier: Builds code\nfor logging/tracing wrappers

        Proxier .down.|> ProxierI
        Proxier -up-> TemplaterI
    }

    package definer {
        class Definer {
            + Define(in Package): error
        }
        note top of Definer: Generates\nwrappers and proxy methods

        Definer .down.|> DefinerI
        Definer -up-> ProxierI
        Definer -up-> EmitterI
    }

    package generator {
        class Generator
    }

    note top of Generator: Coordinates\nthe whole generation process

    Generator -up-> ParserI
    Generator -up-> DefinerI

    package template {
        class Logger {
            + Template(): string
        }

        class Tracer {
            + Template(): string
        }

        class Retrier {
            + Template(): string
        }

        note top of Logger
            Loads template from file\n(if provided in config)
            or uses default embedded template
        end note

        note top of Tracer
            Loads template from file\n(if provided in config)
            or uses default embedded template
        end note

        note top of Retrier
            Loads template from file\n(if provided in config)
            or uses default embedded template
        end note

        Logger ..|> internal.TemplaterI
        Tracer ..|> internal.TemplaterI
        Retrier ..|> internal.TemplaterI
    }
}

package entity {
    enum ProxyType {
        Undefined
        Logger
        Tracer
        Retrier
    }

    enum ParameterType {
        Undefined
        Input
        Output
    }

    enum TagType {
        Undefined
        Context
        Input
        Output
        Retry
    }

    enum ProxyLogger {
        Undefined
        Zap
    }

    enum ProxyTracer {
        Undefined
        OpenTelemetry
    }

    enum ProxyRetrier {
        Undefined
        Backoff
    }

    class Package {
        - name: string
        - imports: string[]
        - interfaces: Interface[]
    }

    class Interface {
        - name: string
        - functions: Function[]
    }

    class Function {
        - name: string
        - input:  Parameter[]
        - output: Parameter[]
        - tags: Tags
    }

    class Tags {
        - context: IO
        - input: IO
        - output: IO
        - retry: Retry
    }

    class Parameter {
        - typ: ParameterType
        - name: string
        - source: string
    }

    class Common {
        - ttype: TagType
        - ptype: ParameterType
    }

    class IO {
        - alias: string
        - name: string
        - source: string
        - key: string
        - parameter: Parameter
    }

    class Retry {}

    Package -down->Interface
    Interface -down-> Function
    Function -down-> Tags
    Function -down-> Parameter
    Tags -down-> IO
    Tags -down-> Retry

    Common *-left- IO
}

package cmd {
    package generator {
    }
}

cmd.generator -up--> internal.generator.Generator
cmd.generator --up----> builder.buildFn

@enduml
